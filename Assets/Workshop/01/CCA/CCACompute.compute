#pragma kernel ResetKernel
#pragma kernel StepKernel
#pragma kernel SecondaryNoiseKernel

Texture2D<float> readTex;
SamplerState sampler_readTex;

RWTexture2D<float> writeTex;
RWTexture2D<float4> outTex;

int rez;
int range;
uint threshold;
uint nstates;
bool moore;

float4 colors[21];

float2 Random(float2 p)
{
    float3 a = frac(p.xyx * float3(123.34, 234.34, 345.65));
    a += dot(a, a + 34.45);
    return frac(float2(a.x * a.y, a.y * a.z));
}

[numthreads(8, 8, 1)]
void ResetKernel(uint3 id : SV_DispatchThreadID)
{
    writeTex[id.xy] = (int) (Random(id.xy * 0.01).x * nstates);
}

 //  Function from Iñigo Quiles
 //  https://www.shadertoy.com/view/MsS3Wc
 //  via: https://thebookofshaders.com/06/
float4 hsb2rgb(float3 c)
{
    float3 rgb = clamp(abs(((c.x * 6.0 + float3(0.0, 4.0, 2.0)) % 6.0) - 3.0) - 1.0, 0.0, 1.0);
    rgb = rgb * rgb * (3.0 - 2.0 * rgb);
    float3 o = c.z * lerp(float3(1.0, 1.0, 1.0), rgb, c.y);
    return float4(o.r, o.g, o.b, 1);
}

void Render(uint3 id, float state, int count)
{
    float s = state / (float) nstates;
    float c = count / ((float) threshold);
    
	////////////////////////////////////////////
	// Basic
    if (false)
    {
        outTex[id.xy] = s;
    }

	// Fade Basic
    if (false)
    {
        outTex[id.xy] *= .4;
        outTex[id.xy] += s;
    }

	// Count
    if (true)
    {
        outTex[id.xy] = c;
    }

	// Fade count
    if (false)
    {
        outTex[id.xy] *= .3;
        outTex[id.xy] += c;
    }


	////////////////////////////////////////////
    float3 hsb = float3(0, .9, 1);

	// Basic Color
    if (false)
    {
        hsb.x = s;
        outTex[id.xy] = hsb2rgb(hsb);
    }

	// Range Color
    if (false)
    {
        hsb.x = hsb.y = hsb.z = s;
        hsb.x = lerp(.3, .0, hsb.x);
        hsb.y += .7;
        hsb.z += .6;
        outTex[id.xy] = hsb2rgb(hsb);
    }

	// Fade Range Color
    if (false)
    {
        hsb.x = hsb.y = hsb.z = s;
        hsb.x = lerp(.3, .0, hsb.x);
        hsb.y += .7;
        hsb.z -= .5;
        hsb.z *= 5;
        hsb.z = clamp(hsb.z, 0, 1);
        outTex[id.xy] += hsb2rgb(hsb);
        outTex[id.xy] *= .7;
    }

	// Range Count Color
    if (false)
    {
        hsb.x = hsb.y = hsb.z = c;
        hsb.x = lerp(.7, .3, hsb.x);
        hsb.y += .7;
        hsb.z = clamp(hsb.z, 0, 1);
        outTex[id.xy] = hsb2rgb(hsb);
    }

	// TRY:
	// 3/15/19/M
	// Range Count Fade Color
    if (true)
    {
        hsb.x = hsb.y = hsb.z = c;
		//hsb.x = lerp(.4, 1, hsb.x);  	// 1/3/4 M
        hsb.x = lerp(0, .1, hsb.x); // 8/14/2/N
        hsb.y += .7;
        outTex[id.xy] += hsb2rgb(hsb);
		//outTex[id.xy] *= .90; // 1/3/4/M
        outTex[id.xy] *= .70;
    }

	//// Preset index
    if (true)
    {
        outTex[id.xy] = colors[state];
    }

	////////////////////////////////////////////
	// Crop
    float d = distance(float2(rez / 2.0, rez / 2.0), id.xy) / (rez / 2.0);
    outTex[id.xy] *= smoothstep(.9, .8, d);
}

[numthreads(8, 8, 1)]
void StepKernel(uint3 id : SV_DispatchThreadID)
{
    // Read state
    uint state = readTex[id.xy];
    
    uint count = 0;
    uint next = state + 1 == nstates ? 0 : state + 1;
    
    // Determine whether each direction contains 'next'
    for (int x = -range; x <= range; x++)
    {
        for (int y = -range; y <= range; y++)
        {
            // Ignore self
            if (x == 0 && y == 0)
            {
                continue;
            }
            
            if (moore || (x == 0 || y == 0))
            {
                // Add translation and convert to 0-1 range expected by the sampler.
                float2 samplePos = (id.xy + int2(x, y)) / (float) rez;
                
                uint s = readTex.SampleLevel(sampler_readTex, samplePos, 0);
                count += (uint) (s == next);
            }
        }
    }
    
    // If threshold is reached, increment step
    if (count >= threshold)
    {
        state = (state + 1) % nstates;
    }
    
    // Write state
    writeTex[id.xy] = state;
    Render(id, state, count);
}

[numthreads(8, 8, 1)]
void SecondaryNoiseKernel(uint3 id : SV_DispatchThreadID)
{
    // Preserve higher states and re-noise lower ones.
    if ((uint) readTex[id.xy] < (uint)nstates)
    {
        // Add Noise
        writeTex[id.xy] = (int) (Random(id.xy).x * nstates);
    }
}
